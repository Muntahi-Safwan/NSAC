import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import {
  User,
  Mail,
  Phone,
  MapPin,
  Calendar,
  Edit3,
  Save,
  X,
  Camera,
  Facebook,
  Twitter,
  Linkedin,
  Instagram,
  Globe,
  Plus,
  Trash2,
  CheckCircle,
  AlertCircle
} from 'lucide-react';

interface PhoneNumber {
  id: string;
  number: string;
  type: 'mobile' | 'home' | 'work';
}

interface SocialLink {
  platform: 'facebook' | 'twitter' | 'linkedin' | 'instagram' | 'website';
  username: string;
  icon: React.ComponentType<{ className?: string }>;
}

const Profile = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [profileData, setProfileData] = useState({
    name: 'John Doe',
    email: 'john.doe@example.com',
    location: 'San Francisco, CA',
    joinDate: '2024-01-15',
    bio: 'Environmental enthusiast passionate about air quality monitoring and sustainability.',
  });

  const [phoneNumbers, setPhoneNumbers] = useState<PhoneNumber[]>([
    { id: '1', number: '+1 (555) 123-4567', type: 'mobile' },
    { id: '2', number: '+1 (555) 987-6543', type: 'work' },
  ]);

  const [socialLinks, setSocialLinks] = useState<SocialLink[]>([
    { platform: 'facebook', username: 'johndoe', icon: Facebook },
    { platform: 'twitter', username: '@johndoe', icon: Twitter },
    { platform: 'linkedin', username: 'john-doe', icon: Linkedin },
  ]);

  const [newPhone, setNewPhone] = useState({ number: '', type: 'mobile' as const });
  const [newSocial, setNewSocial] = useState({ platform: 'facebook' as const, username: '' });
  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');

  const handleSave = () => {
    setSaveStatus('saving');

    // Simulate API call
    setTimeout(() => {
      setIsEditing(false);
      setSaveStatus('saved');
      setTimeout(() => setSaveStatus('idle'), 3000);
    }, 1000);
  };

  const handleCancel = () => {
    setIsEditing(false);
    setSaveStatus('idle');
  };

  const addPhoneNumber = () => {
    if (newPhone.number.trim()) {
      setPhoneNumbers([
        ...phoneNumbers,
        { id: Date.now().toString(), ...newPhone }
      ]);
      setNewPhone({ number: '', type: 'mobile' });
    }
  };

  const removePhoneNumber = (id: string) => {
    setPhoneNumbers(phoneNumbers.filter(phone => phone.id !== id));
  };

  const addSocialLink = () => {
    if (newSocial.username.trim()) {
      const iconMap = {
        facebook: Facebook,
        twitter: Twitter,
        linkedin: Linkedin,
        instagram: Instagram,
        website: Globe,
      };

      setSocialLinks([
        ...socialLinks,
        { ...newSocial, icon: iconMap[newSocial.platform] }
      ]);
      setNewSocial({ platform: 'facebook', username: '' });
    }
  };

  const removeSocialLink = (platform: string) => {
    setSocialLinks(socialLinks.filter(link => link.platform !== platform));
  };

  const getSocialIcon = (platform: string) => {
    const icons = {
      facebook: Facebook,
      twitter: Twitter,
      linkedin: Linkedin,
      instagram: Instagram,
      website: Globe,
    };
    return icons[platform as keyof typeof icons] || Globe;
  };

  const getSocialColor = (platform: string) => {
    const colors = {
      facebook: 'text-[#1877F2] bg-[#1877F2]/10 border-[#1877F2]/20 hover:bg-[#1877F2]/20',
      twitter: 'text-[#1DA1F2] bg-[#1DA1F2]/10 border-[#1DA1F2]/20 hover:bg-[#1DA1F2]/20',
      linkedin: 'text-[#0A66C2] bg-[#0A66C2]/10 border-[#0A66C2]/20 hover:bg-[#0A66C2]/20',
      instagram: 'text-[#E4405F] bg-[#E4405F]/10 border-[#E4405F]/20 hover:bg-[#E4405F]/20',
      website: 'text-emerald-400 bg-emerald-500/10 border-emerald-400/20 hover:bg-emerald-500/20',
    };
    return colors[platform as keyof typeof colors] || colors.website;
  };

  return (
    <div className="min-h-screen relative overflow-hidden py-8 sm:py-12 lg:py-16">
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Save Status Banner */}
        {saveStatus === 'saved' && (
          <div className="mb-6 bg-emerald-500/10 border border-emerald-400/20 rounded-xl p-4 flex items-center space-x-3 animate-fade-in">
            <CheckCircle className="w-5 h-5 text-emerald-400" />
            <span className="text-emerald-300 font-medium">Profile saved successfully!</span>
          </div>
        )}

        {saveStatus === 'error' && (
          <div className="mb-6 bg-red-500/10 border border-red-400/20 rounded-xl p-4 flex items-center space-x-3 animate-fade-in">
            <AlertCircle className="w-5 h-5 text-red-400" />
            <span className="text-red-300 font-medium">Failed to save profile. Please try again.</span>
          </div>
        )}

        {/* Profile Header */}
        <div className="bg-gradient-to-br from-white/[0.04] to-white/[0.07] backdrop-blur-3xl border border-white/[0.08] rounded-2xl sm:rounded-3xl p-6 sm:p-8 lg:p-10 shadow-2xl mb-6 sm:mb-8">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-6 mb-8">
            <div className="flex items-center space-x-4 sm:space-x-6">
              {/* Profile Picture */}
              <div className="relative group">
                <div className="w-20 h-20 sm:w-24 sm:h-24 lg:w-28 lg:h-28 bg-gradient-to-br from-blue-500 to-cyan-600 rounded-full flex items-center justify-center shadow-2xl shadow-blue-500/30">
                  <User className="w-10 h-10 sm:w-12 sm:h-12 lg:w-14 lg:h-14 text-white" />
                </div>
                {isEditing && (
                  <button className="absolute bottom-0 right-0 bg-cyan-500 hover:bg-cyan-400 text-white p-2 sm:p-2.5 rounded-full transition-all duration-300 hover:scale-110 shadow-lg">
                    <Camera className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                  </button>
                )}
              </div>

              {/* Name and Bio */}
              <div>
                {isEditing ? (
                  <input
                    type="text"
                    value={profileData.name}
                    onChange={(e) => setProfileData({ ...profileData, name: e.target.value })}
                    className="text-2xl sm:text-3xl lg:text-4xl font-bold text-white bg-white/[0.05] border border-white/[0.1] rounded-lg px-4 py-2 mb-2 focus:outline-none focus:border-cyan-400/50 transition-all"
                  />
                ) : (
                  <h1 className="text-2xl sm:text-3xl lg:text-4xl font-bold text-white mb-2">
                    {profileData.name}
                  </h1>
                )}
                <p className="text-white/60 text-sm sm:text-base flex items-center space-x-2">
                  <Calendar className="w-4 h-4" />
                  <span>Joined {new Date(profileData.joinDate).toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</span>
                </p>
              </div>
            </div>

            {/* Edit/Save Buttons */}
            <div className="flex space-x-3 w-full sm:w-auto">
              {!isEditing ? (
                <button
                  onClick={() => setIsEditing(true)}
                  className="flex-1 sm:flex-none inline-flex items-center justify-center space-x-2 bg-gradient-to-r from-blue-500 to-cyan-600 hover:from-blue-400 hover:to-cyan-500 text-white font-semibold px-5 sm:px-6 py-2.5 sm:py-3 rounded-xl transition-all duration-300 hover:scale-105 hover:shadow-lg hover:shadow-cyan-500/25"
                >
                  <Edit3 className="w-4 h-4" />
                  <span>Edit Profile</span>
                </button>
              ) : (
                <>
                  <button
                    onClick={handleCancel}
                    className="flex-1 sm:flex-none inline-flex items-center justify-center space-x-2 bg-white/[0.05] hover:bg-white/[0.1] border border-white/[0.1] hover:border-white/[0.2] text-white/70 hover:text-white font-semibold px-5 sm:px-6 py-2.5 sm:py-3 rounded-xl transition-all duration-300"
                  >
                    <X className="w-4 h-4" />
                    <span>Cancel</span>
                  </button>
                  <button
                    onClick={handleSave}
                    disabled={saveStatus === 'saving'}
                    className="flex-1 sm:flex-none inline-flex items-center justify-center space-x-2 bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-400 hover:to-teal-500 text-white font-semibold px-5 sm:px-6 py-2.5 sm:py-3 rounded-xl transition-all duration-300 hover:scale-105 hover:shadow-lg hover:shadow-emerald-500/25 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <Save className="w-4 h-4" />
                    <span>{saveStatus === 'saving' ? 'Saving...' : 'Save'}</span>
                  </button>
                </>
              )}
            </div>
          </div>

          {/* Bio */}
          <div className="mb-8 pb-8 border-b border-white/[0.08]">
            <h3 className="text-white/80 font-semibold mb-3 text-sm sm:text-base">About</h3>
            {isEditing ? (
              <textarea
                value={profileData.bio}
                onChange={(e) => setProfileData({ ...profileData, bio: e.target.value })}
                rows={3}
                className="w-full text-white/80 bg-white/[0.05] border border-white/[0.1] rounded-lg px-4 py-3 focus:outline-none focus:border-cyan-400/50 transition-all resize-none text-sm sm:text-base"
              />
            ) : (
              <p className="text-white/70 leading-relaxed text-sm sm:text-base">{profileData.bio}</p>
            )}
          </div>

          {/* Contact Information */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Email */}
            <div>
              <label className="text-white/80 font-semibold mb-2 flex items-center space-x-2 text-sm sm:text-base">
                <Mail className="w-4 h-4" />
                <span>Email</span>
              </label>
              {isEditing ? (
                <input
                  type="email"
                  value={profileData.email}
                  onChange={(e) => setProfileData({ ...profileData, email: e.target.value })}
                  className="w-full text-white/80 bg-white/[0.05] border border-white/[0.1] rounded-lg px-4 py-2.5 focus:outline-none focus:border-cyan-400/50 transition-all text-sm sm:text-base"
                />
              ) : (
                <p className="text-white/70 bg-white/[0.03] border border-white/[0.06] rounded-lg px-4 py-2.5 text-sm sm:text-base">
                  {profileData.email}
                </p>
              )}
            </div>

            {/* Location */}
            <div>
              <label className="text-white/80 font-semibold mb-2 flex items-center space-x-2 text-sm sm:text-base">
                <MapPin className="w-4 h-4" />
                <span>Location</span>
              </label>
              {isEditing ? (
                <input
                  type="text"
                  value={profileData.location}
                  onChange={(e) => setProfileData({ ...profileData, location: e.target.value })}
                  className="w-full text-white/80 bg-white/[0.05] border border-white/[0.1] rounded-lg px-4 py-2.5 focus:outline-none focus:border-cyan-400/50 transition-all text-sm sm:text-base"
                />
              ) : (
                <p className="text-white/70 bg-white/[0.03] border border-white/[0.06] rounded-lg px-4 py-2.5 text-sm sm:text-base">
                  {profileData.location}
                </p>
              )}
            </div>
          </div>
        </div>

        {/* Phone Numbers Section */}
        <div className="bg-gradient-to-br from-white/[0.04] to-white/[0.07] backdrop-blur-3xl border border-white/[0.08] rounded-2xl sm:rounded-3xl p-6 sm:p-8 shadow-xl mb-6 sm:mb-8">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl sm:text-2xl font-bold text-white flex items-center space-x-2">
              <Phone className="w-5 h-5 sm:w-6 sm:h-6 text-cyan-400" />
              <span>Phone Numbers</span>
            </h2>
          </div>

          <div className="space-y-3 sm:space-y-4 mb-6">
            {phoneNumbers.map((phone) => (
              <div
                key={phone.id}
                className="bg-white/[0.03] border border-white/[0.06] hover:border-white/[0.1] rounded-xl p-4 flex items-center justify-between transition-all duration-300"
              >
                <div className="flex items-center space-x-3 flex-1">
                  <div className="w-10 h-10 bg-blue-500/10 border border-blue-400/20 rounded-lg flex items-center justify-center">
                    <Phone className="w-4 h-4 text-blue-400" />
                  </div>
                  <div>
                    <p className="text-white font-medium text-sm sm:text-base">{phone.number}</p>
                    <p className="text-white/50 text-xs sm:text-sm capitalize">{phone.type}</p>
                  </div>
                </div>
                {isEditing && (
                  <button
                    onClick={() => removePhoneNumber(phone.id)}
                    className="p-2 bg-red-500/10 hover:bg-red-500/20 border border-red-400/20 hover:border-red-400/40 text-red-400 rounded-lg transition-all duration-300 hover:scale-110"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                )}
              </div>
            ))}
          </div>

          {/* Add Phone Number */}
          {isEditing && (
            <div className="bg-white/[0.03] border border-white/[0.08] rounded-xl p-4">
              <p className="text-white/70 font-medium mb-3 text-sm sm:text-base">Add Phone Number</p>
              <div className="flex flex-col sm:flex-row gap-3">
                <input
                  type="tel"
                  placeholder="Phone number"
                  value={newPhone.number}
                  onChange={(e) => setNewPhone({ ...newPhone, number: e.target.value })}
                  className="flex-1 bg-white/[0.05] border border-white/[0.1] text-white rounded-lg px-4 py-2.5 focus:outline-none focus:border-cyan-400/50 transition-all text-sm sm:text-base"
                />
                <select
                  value={newPhone.type}
                  onChange={(e) => setNewPhone({ ...newPhone, type: e.target.value as 'mobile' | 'home' | 'work' })}
                  className="bg-white/[0.05] border border-white/[0.1] text-white rounded-lg px-4 py-2.5 focus:outline-none focus:border-cyan-400/50 transition-all text-sm sm:text-base"
                >
                  <option value="mobile">Mobile</option>
                  <option value="home">Home</option>
                  <option value="work">Work</option>
                </select>
                <button
                  onClick={addPhoneNumber}
                  className="inline-flex items-center justify-center space-x-2 bg-gradient-to-r from-blue-500 to-cyan-600 hover:from-blue-400 hover:to-cyan-500 text-white font-semibold px-4 py-2.5 rounded-lg transition-all duration-300 hover:scale-105 text-sm sm:text-base"
                >
                  <Plus className="w-4 h-4" />
                  <span>Add</span>
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Social Links Section */}
        <div className="bg-gradient-to-br from-white/[0.04] to-white/[0.07] backdrop-blur-3xl border border-white/[0.08] rounded-2xl sm:rounded-3xl p-6 sm:p-8 shadow-xl">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl sm:text-2xl font-bold text-white flex items-center space-x-2">
              <Globe className="w-5 h-5 sm:w-6 sm:h-6 text-cyan-400" />
              <span>Social Links</span>
            </h2>
          </div>

          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4 mb-6">
            {socialLinks.map((link) => {
              const Icon = link.icon;
              return (
                <div
                  key={link.platform}
                  className={`border rounded-xl p-4 flex items-center justify-between transition-all duration-300 ${getSocialColor(link.platform)}`}
                >
                  <div className="flex items-center space-x-3 flex-1 min-w-0">
                    <div className="w-10 h-10 bg-white/[0.1] rounded-lg flex items-center justify-center flex-shrink-0">
                      <Icon className="w-4 h-4" />
                    </div>
                    <div className="min-w-0 flex-1">
                      <p className="font-medium text-sm capitalize">{link.platform}</p>
                      <p className="text-xs opacity-70 truncate">{link.username}</p>
                    </div>
                  </div>
                  {isEditing && (
                    <button
                      onClick={() => removeSocialLink(link.platform)}
                      className="p-2 bg-white/[0.1] hover:bg-white/[0.2] rounded-lg transition-all duration-300 hover:scale-110 flex-shrink-0 ml-2"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  )}
                </div>
              );
            })}
          </div>

          {/* Add Social Link */}
          {isEditing && (
            <div className="bg-white/[0.03] border border-white/[0.08] rounded-xl p-4">
              <p className="text-white/70 font-medium mb-3 text-sm sm:text-base">Add Social Link</p>
              <div className="flex flex-col sm:flex-row gap-3">
                <select
                  value={newSocial.platform}
                  onChange={(e) => setNewSocial({ ...newSocial, platform: e.target.value as any })}
                  className="bg-white/[0.05] border border-white/[0.1] text-white rounded-lg px-4 py-2.5 focus:outline-none focus:border-cyan-400/50 transition-all text-sm sm:text-base"
                >
                  <option value="facebook">Facebook</option>
                  <option value="twitter">Twitter</option>
                  <option value="linkedin">LinkedIn</option>
                  <option value="instagram">Instagram</option>
                  <option value="website">Website</option>
                </select>
                <input
                  type="text"
                  placeholder="Username or profile name"
                  value={newSocial.username}
                  onChange={(e) => setNewSocial({ ...newSocial, username: e.target.value })}
                  className="flex-1 bg-white/[0.05] border border-white/[0.1] text-white rounded-lg px-4 py-2.5 focus:outline-none focus:border-cyan-400/50 transition-all text-sm sm:text-base"
                />
                <button
                  onClick={addSocialLink}
                  className="inline-flex items-center justify-center space-x-2 bg-gradient-to-r from-blue-500 to-cyan-600 hover:from-blue-400 hover:to-cyan-500 text-white font-semibold px-4 py-2.5 rounded-lg transition-all duration-300 hover:scale-105 text-sm sm:text-base"
                >
                  <Plus className="w-4 h-4" />
                  <span>Add</span>
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Profile;