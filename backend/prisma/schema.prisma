// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  password        String
  firstName       String?
  lastName        String?
  phoneNumbers    String[]          @default([])
  socialUsernames Json?
  lastLocation    Json?             // {city, region, country, lat, lng}
  isSafe          Boolean           @default(true)
  safetyUpdatedAt DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  notifications   Notification[]
  quizAttempts    QuizAttempt[]

  @@map("users")
}

model NGO {
  id              String         @id @default(uuid())
  email           String         @unique
  password        String
  name            String
  description     String?
  region          String         // City/Region they operate in
  country         String         @default("Bangladesh")
  coordinates     Json?          // {lat, lng}
  contactPhone    String?
  verified        Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  notifications   Notification[]

  @@map("ngos")
}

model Notification {
  id          String    @id @default(uuid())
  ngoId       String
  ngo         NGO       @relation(fields: [ngoId], references: [id], onDelete: Cascade)

  title       String
  message     String
  severity    String    // info, warning, danger, critical
  region      String    // Target region
  isAlert     Boolean   @default(false) // Is this a disaster alert?

  createdAt   DateTime  @default(now())
  expiresAt   DateTime?

  recipients  User[]

  @@index([ngoId])
  @@index([region])
  @@index([createdAt])
  @@map("notifications")
}

model Quiz {
  id          String        @id @default(uuid())
  title       String
  description String?
  difficulty  String        // beginner, intermediate, advanced
  category    String        // air_quality, health, environment
  questions   Json          // Array of question objects
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  attempts    QuizAttempt[]

  @@map("quizzes")
}

model QuizAttempt {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  score       Int
  totalQuestions Int
  answers     Json     // Array of user answers with correctness
  difficulty  String

  completedAt DateTime @default(now())

  @@index([userId])
  @@index([quizId])
  @@map("quiz_attempts")
}

model AirQualityForecast {
  id               Int      @id @default(autoincrement())
  timestamp        DateTime // Forecast valid time
  forecastInitTime DateTime // When the forecast was initialized (00z or 12z)

  // Location (filtered to TEMPO coverage: North America)
  latitude         Float    // Range: ~15°N to ~60°N
  longitude        Float    // Range: ~-130°W to ~-60°W
  level            Float    // Atmospheric level (surface = 0)

  // Pollutant concentrations (μg/m³ unless noted)
  // All available from GEOS-CF
  pm25             Float?   // PM2.5 - Particulate Matter < 2.5μm
  no2              Float?   // NO2 - Nitrogen Dioxide
  o3               Float?   // O3 - Ozone
  so2              Float?   // SO2 - Sulfur Dioxide
  co               Float?   // CO - Carbon Monoxide (ppbv)
  hcho             Float?   // HCHO - Formaldehyde

  // Calculated AQI
  aqi              Float?   // Overall Air Quality Index (0-500)

  // Metadata
  source           String   @default("GEOS-CF")
  createdAt        DateTime @default(now())

  // Composite indexes for efficient geospatial + time queries
  // PostGIS will use these for nearest-neighbor searches
  @@index([latitude, longitude])
  @@index([timestamp])
  @@index([forecastInitTime])
  @@index([timestamp, latitude, longitude])
  @@index([source])
  @@map("air_quality_forecasts")
}
